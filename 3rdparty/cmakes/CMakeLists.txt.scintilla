cmake_minimum_required(VERSION 3.15)
project(scintilla VERSION 1.0.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Widgets Network LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets Network LinguistTools)
if(Qt6_FOUND)
        find_package(Qt6 COMPONENTS Core5Compat REQUIRED)
endif()

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON) # if you have any .ui files
set(CMAKE_AUTORCC ON) # if you have any .qrc files

include_directories(${PROJECT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR})

add_compile_definitions(SCINTILLA_QT=1
        SCI_LEXER=1
        _CRT_SECURE_NO_DEPRECATE=1
        SCI_STATIC_LINK=1
        NO_DLL=1
        EXPORT_IMPORT_API=
        )

file(GLOB
        scintilla_src
        ./src/*.cxx
        ./qt/ScintillaEdit/*.cpp
        ./qt/ScintillaEditBase/*.cpp
)

IF(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
        qt_add_library(${PROJECT_NAME} STATIC ${scintilla_src})
ELSE()
        add_library(${PROJECT_NAME} STATIC ${scintilla_src})
ENDIF()

target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt::Widgets
        Qt::Network
        )
if(Qt6_FOUND)
        target_link_libraries(${PROJECT_NAME} PRIVATE
                Qt::Core5Compat
                )
endif()

target_include_directories (${PROJECT_NAME} PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR} 
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/qt/ScintillaEdit
    ${CMAKE_CURRENT_SOURCE_DIR}/qt/ScintillaEditBase
    )
