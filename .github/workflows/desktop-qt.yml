name: Desktop-qt
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/62641e01-1e8d-4ace-91d6-ae03f7f8a71f/w_BaseKit_p_2024.0.0.49563_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/5b36181e-4974-4733-91c7-0c10c54900a5/w_HPCKit_p_2024.0.0.49588_offline.exe
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
  CACHE_NUMBER: 6
  SAMPLES_TAG: 2024.0.0
  COMPILER_VERSION: 2024.0.0
  TBB_VERSION: 2021.11.0
  VS_VER: vs2022
  CLANG_LINK: https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe
      
jobs:
  win32-msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        toolset: [cl, icx, clang-cl]
        qt_ver: [6.6.1, 5.15.2]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        msvc_arch: [x64]
        qt_arch_install: [msvc2019_64]
        mingw_arch: [MINGW64]
        include:
          - toolset: cl
            qt_ver: 6.6.1
            qt_modules: "qt5compat qtimageformats"
          - toolset: cl
            qt_ver: 5.15.2
            qt_modules: ""
          - toolset: icx
            qt_ver: 6.6.2
            qt_modules: "qt5compat qtimageformats"
          - toolset: icx
            qt_ver: 5.15.2
            qt_modules: ""
          - toolset: clang-cl
            qt_ver: 6.6.2
            qt_modules: "qt5compat qtimageformats"
          - toolset: clang-cl
            qt_ver: 5.15.2
            qt_modules: ""
    env:
      targetName: CodeInspector
      
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cache: 'true'
          cache-key-prefix: 'install-qt-action-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}'
          modules: ${{ matrix.qt_modules }}
          aqtversion: '==3.0.1'
                    
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip curl
          
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          submodules: true
      
      - name: copy CMakeLists.txt
        shell: msys2 {0}
        run: |
          cd 3rdparty
          cp cmakes/CMakeLists.txt.lexilla lexilla/CMakeLists.txt
          cp cmakes/CMakeLists.txt.lua lua/CMakeLists.txt
          cp cmakes/CMakeLists.txt.lpeg lpeg/CMakeLists.txt
          cp cmakes/CMakeLists.txt.scintilla scintilla/CMakeLists.txt
          cp cmakes/CMakeLists.txt.scintillua scintillua/CMakeLists.txt

      - name: patch
        shell: cmd
        run: |
          cd 3rdparty\scintillua
          git apply ..\scintillua.patch
          cd ..\zlib
          git apply ..\zlib.patch
          cd ..\..
      
      - name: Set up clang for Windows
        if: matrix.toolset == 'clang-cl'
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ env.CLANG_LINK }}
          7z.exe x LLVM.exe
          cd ..

      - name: cache intel install
        if: matrix.toolset == 'icx'
        id: cache-install
        uses: actions/cache@v2
        with:
          path: |
              C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
              C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.CACHE_NUMBER }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}

      - name: install intel
        if: steps.cache-install.outputs.cache-hit != 'true' && matrix.toolset == 'icx'
        run: |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/install_windows.bat ${{ env.WINDOWS_HPCKIT_URL }} ${{ env.WINDOWS_CPP_COMPONENTS }}

      - name: restore registry on cache hit
        if: steps.cache-install.outputs.cache-hit == 'true' && matrix.toolset == 'icx'
        run:  |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/restore_registry.bat ${{ env.COMPILER_VERSION }}

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          for /f "tokens=* usebackq" %%f in (`dir /b "C:\Program Files (x86)\Intel\oneAPI\compiler\" ^| findstr /V latest ^| sort`) do @set "LATEST_VERSION=%%f"
          echo %LATEST_VERSION%
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\env\vars.bat"
          set PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\%LATEST_VERSION%\bin\";%CD%\llvm\bin;%CD%\jom;%PATH%
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          cd ..\..\..\..
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.toolset }} -DCMAKE_CXX_COMPILER=${{ matrix.toolset }} -G Ninja ..
          cmake --build . --parallel --verbose
          cd ..
          
  win32-mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: mingw64_qt6-ucrt-gcc
            mingw_arch: UCRT64
            mingw_prefix: mingw-w64-ucrt-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            qt_build: qt6
            qt_dir: /ucrt64/lib/cmake/Qt6
            cmake_prefix_path: /ucrt64
          - qt_arch: mingw64_qt6-gcc
            mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            qt_build: qt6
            qt_dir: /mingw64/lib/cmake/Qt6
            cmake_prefix_path: /ucrt64
          - qt_arch: mingw64_qt6-clang
            mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            qt_build: qt6
            qt_dir: /clang64/lib/cmake/Qt6
            cmake_prefix_path: /clang64
          - qt_arch: mingw64_qt5-ucrt-gcc
            mingw_arch: UCRT64
            mingw_prefix: mingw-w64-ucrt-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            qt_build: qt5
            qt_dir: /ucrt64/lib/cmake/Qt5
            cmake_prefix_path: /ucrt64
          - qt_arch: mingw64_qt5-gcc
            mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            qt_build: qt5
            qt_dir: /mingw64/lib/cmake/Qt5
            cmake_prefix_path: /mingw64
          - qt_arch: mingw64_qt5-clang
            mingw_arch: CLANG64
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            qt_build: qt5
            qt_dir: /clang64/lib/cmake/Qt5
            cmake_prefix_path: /clang64
          - qt_arch: mingw64_qt5-static-ucrt-gcc
            mingw_arch: UCRT64
            mingw_prefix: mingw-w64-ucrt-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            qt_build: qt5-static
            qt_dir: /ucrt64/qt5-static/lib/cmake/Qt5
            cmake_prefix_path: /ucrt64/qt5-static
          - qt_arch: mingw64_qt5-static-gcc
            mingw_arch: MINGW64
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            qt_build: qt5-static
            qt_dir: /mingw64/qt5-static/lib/cmake/Qt5
            cmake_prefix_path: /mingw64/qt5-static
          - qt_arch: mingw64_qt5-static-clang
            mingw_arch: CLANG64
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            qt_build: qt5-static
            qt_dir: /clang64/qt5-static/lib/cmake/Qt5
            cmake_prefix_path: /clang64/qt5-static
    env:
      targetName: CodeInspector
      
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install:  ${{ matrix.mingw_prefix }}-cmake ${{ matrix.mingw_prefix }}-ninja ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }}  ${{ matrix.mingw_prefix }}-clang ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-${{ matrix.qt_build }} ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd ${{ matrix.mingw_prefix }}-libb2 ${{ matrix.mingw_prefix }}-jasper

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 1
          submodules: true
          
      - run: |
          git clone https://github.com/missdeer/mingwdeployqt.git
          
      - name: Build mingwdeployqt
        shell: msys2 {0}
        run: |
          cd mingwdeployqt
          mkdir build
          cd build
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/${{ matrix.qt_build }}/bin:/usr/bin:$PATH cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH ninja
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH cp mingwdeployqt.exe /${{ matrix.mingw_arch }}/bin/
          cd ../..

      - name: copy CMakeLists.txt
        shell: msys2 {0}
        run: |
          cd 3rdparty
          cp cmakes/CMakeLists.txt.lexilla lexilla/CMakeLists.txt
          cp cmakes/CMakeLists.txt.lua lua/CMakeLists.txt
          cp cmakes/CMakeLists.txt.lpeg lpeg/CMakeLists.txt
          cp cmakes/CMakeLists.txt.scintilla scintilla/CMakeLists.txt
          cp cmakes/CMakeLists.txt.scintillua scintillua/CMakeLists.txt

      - name: patch 3rdparty
        shell: cmd
        run: |
          cd 3rdparty\scintillua
          git apply ..\scintillua.patch
          cd ..\lexilla
          git apply ..\lexilla.patch
          cd ..\zlib
          git apply ..\zlib.patch
          cd ..\..

      - name: prepare Scintilla
        shell: cmd
        run: |
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          cd ..\..\..\..

      - name: build
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/${{ matrix.mingw_arch }}/${{ matrix.qt_build }}/bin:/usr/bin:$PATH cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DQT_DIR=${{ matrix.qt_dir }} -DCMAKE_PREFIX_PATH=${{ matrix.cmake_prefix_path }} -G Ninja ..
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH cmake --build . --parallel --verbose
          env MSYSTEM=${{ matrix.mingw_arch }} PATH=/${{ matrix.mingw_arch }}/bin:/usr/bin:$PATH mingwdeployqt.exe desktop-qt/CodeInspector.exe
          
  macOS:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [macos-latest]
        qt_ver: [6.6.2]
        qt_arch: [clang_64]
    env:
      targetName: CodeInspector
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          cache: 'true'
          cache-key-prefix: 'install-qt-action-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}'
          modules: "qt5compat qtimageformats"
          aqtversion: '==3.0.1'
        
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          submodules: true
      
      - name: patch 3rdparty
        run: |
          cd 3rdparty
          cp cmakes/CMakeLists.txt.lexilla lexilla/CMakeLists.txt
          cp cmakes/CMakeLists.txt.lua lua/CMakeLists.txt
          cp cmakes/CMakeLists.txt.lpeg lpeg/CMakeLists.txt
          cp cmakes/CMakeLists.txt.scintilla scintilla/CMakeLists.txt
          cp cmakes/CMakeLists.txt.scintillua scintillua/CMakeLists.txt
          cd scintillua
          git apply ../scintillua.patch
          cd ../zlib
          git apply ../zlib.patch
          git apply ../zlib-macos.patch
          cd ../..
      
      - name: build macos
        run: |
          brew install ninja
          cd 3rdparty/scintilla/qt/ScintillaEdit
          python WidgetGen.py
          cd ../../../..
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
          cmake --build . --parallel --verbose
          cd ..
          
      - name: package
        run: |
          macdeployqt "build/desktop-qt/${targetName}.app" -qmldir=. -verbose=1 -dmg
        
