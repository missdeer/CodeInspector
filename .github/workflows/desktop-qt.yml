name: Desktop-qt
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
jobs:
  win32-msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [6.3.0]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        include:
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            mingw_arch: MINGW64 
    env:
      targetName: CodeInspector
      
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          modules: "qt5compat qtimageformats"
          aqtversion: '==2.1.0'
                    
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip curl
          
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          submodules: true
      
      - name: patch
        shell: cmd
        run: |
          cd 3rdparty\scintillua
          git apply ..\scintillua.patch
          cd ..\..
      
      - name: Set up jom
        shell: cmd
        run: |
          mkdir jom
          cd jom
          curl.exe -o jom.zip -L https://download.qt.io/official_releases/jom/jom_1_1_3.zip
          7z.exe x jom.zip
          cd ..
          
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=%PATH%;%CD%\jom
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          cd ..\..\..\..
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ..\${{ env.targetName }}.pro
          jom -j %NUMBER_OF_PROCESSORS%
          cd ..
          
  win32-clang-msvc:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [6.3.0]
        qt_target: [desktop]
        qt_arch: [win64_msvc2019_64]
        include:
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            mingw_arch: MINGW64 
            clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/LLVM-14.0.0-win64.exe
    env:
      targetName: CodeInspector
      
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          modules: "qt5compat qtimageformats"
          aqtversion: '==2.1.0'
                    
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip curl
          
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          submodules: true
      
      - name: patch 
        shell: cmd
        run: |
          cd 3rdparty\scintillua
          git apply ..\scintillua.patch
          cd ..\..
          
      - name: Set up clang for Windows
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ matrix.clang_link }}
          7z.exe x LLVM.exe
          cd ..
      
      - name: Set up jom
        shell: cmd
        run: |
          mkdir jom
          cd jom
          curl.exe -o jom.zip -L https://download.qt.io/official_releases/jom/jom_1_1_3.zip
          7z.exe x jom.zip
          cd ..
          
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          set PATH=%PATH%;%CD%\llvm\bin;%CD%\jom
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          cd ..\..\..\..
          mkdir build
          cd build
          qmake -r -spec win32-clang-msvc CONFIG+=release CONFIG+=qtquickcompiler ..\${{ env.targetName }}.pro
          jom -j %NUMBER_OF_PROCESSORS%
          cd ..
          
  win32-mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        qt_arch: [mingw64_qt5-gcc, mingw64_qt5-static-gcc, mingw64_qt5-clang, mingw64_qt6-gcc, mingw64_qt6-clang]
        include:
          - qt_arch: mingw64_qt5-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
          - qt_arch: mingw64_qt5-static-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt5-static
            qmake: /mingw64/qt5-static/bin/qmake.exe
            windeployqt: ls.exe
          - qt_arch: mingw64_qt5-clang
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: clang
            mkspec: win32-clang-g++
            qt_build: qt5
            qmake: qmake.exe
            windeployqt: windeployqt.exe
          - qt_arch: mingw64_qt6-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            mkspec: win32-g++
            qt_build: qt6
            qmake: qmake6.exe
            windeployqt: windeployqt.exe
          - qt_arch: mingw64_qt6-clang
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: clang
            mkspec: win32-clang-g++
            qt_build: qt6
            qmake: qmake6.exe
            windeployqt: windeployqt.exe
    env:
      targetName: CodeInspector
      
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install:  ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-${{ matrix.qt_build }} ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd ${{ matrix.mingw_prefix }}-libb2 ${{ matrix.mingw_prefix }}-jasper

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 1
          submodules: true
      
      - name: patch 
        shell: cmd
        run: |
          cd 3rdparty\scintillua
          git apply ..\scintillua.patch
          cd ..\lexilla
          git apply ..\lexilla.patch
          cd ..\zlib
          git apply ..\zlib.patch
          cd ..\..

      - name: prepare Scintilla
        shell: cmd
        run: |
          cd 3rdparty\scintilla\qt\ScintillaEdit
          python WidgetGen.py
          cd ..\..\..\..

      - name: qmake
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          ${{ matrix.qmake }} -r -spec ${{ matrix.mkspec }} CONFIG+=release CONFIG+=qtquickcompiler ..
          cd ..

      - name: mingw32-make
        shell: msys2 {0}
        run: |
          cd build
          mingw32-make.exe -j $NUMBER_OF_PROCESSORS
          cd ..

      - name: extract executable
        env:
          archiveName: ${{ env.targetName }}-${{ matrix.toolchains }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item build\desktop-qt\release\${env:targetName}'.exe' ${env:archiveName}\
          
  macOS:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [macos-latest]
        qt_ver: [6.3.0]
        qt_arch: [clang_64]
    env:
      targetName: CodeInspector
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          modules: "qt5compat qtimageformats"
          aqtversion: '==2.1.0'
        
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          submodules: true
      
      - name: patch scintillua
        run: |
          cd 3rdparty/scintillua
          git apply ../scintillua.patch
          cd ../zlib
          git apply ../zlib.patch
          cd ../..
      
      - name: build macos
        run: |
          cd 3rdparty/scintilla/qt/ScintillaEdit
          python WidgetGen.py
          cd ../../../..
          mkdir build
          cd build
          qmake -r CONFIG+=release CONFIG+=qtquickcompiler ../${{ env.targetName }}.pro
          make -j `sysctl -n hw.logicalcpu`
          cd ..
          
      - name: package
        run: |
          macdeployqt "build/desktop-qt/${targetName}.app" -qmldir=. -verbose=1 -dmg
        
